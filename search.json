[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Tejomay’s blog."
  },
  {
    "objectID": "posts/qmd/fastai.html",
    "href": "posts/qmd/fastai.html",
    "title": "Course notes: fast.ai Deep Learning",
    "section": "",
    "text": "Here’s what I found useful from the 2022 offering of Practical Deep Learning for Coders by fasti.ai."
  },
  {
    "objectID": "posts/qmd/fastai.html#getting-started",
    "href": "posts/qmd/fastai.html#getting-started",
    "title": "Course notes: fast.ai Deep Learning",
    "section": "1 Getting started",
    "text": "1 Getting started\n\n1.1 The significance of the XOR affair\nMinksy’s Perceptrons (1969) is infamous for claiming that neural networks cannot learn logic. AI history is very complex so perhaps this isn’t exactly accurate. But the book has become a symbol of a certain side of the AI debate.\nThe dispute is about logic.\nToday logic is not that important. We don’t care what a model does as long as it is useful. But this was not always the case. Stemming off very intense movements in philosophy and other disciplines1, logic in the last century was seen by many as the very fabric of reality. It is in this environment that computers, prized as first and foremost for being logical machines, were invented.\nMinsky’s problem with neural networks, then, was that they were not logical structured. Unlike a computer, which is built from the ground up using determinate Boolean operations, neural networks instead use calculus and numerical optimization to fit curves.\nIt is against this background that Minsky’s actual argument, that a single neuron cannot not compute a basic logical function called “exclusive or” (XOR for short), makes any sense. Otherwise he comes off as nitpicking. Perhaps, but this misses the stakes of the argument: the disputation between what is true and what is useful.\n\n1.1.1 Appendix\nFor reference XOR looks like this:\n\n\n\n\nFalse\nTrue\n\n\n\n\nFalse\n0\n1\n\n\nTrue\n1\n0\n\n\n\nMinsky’s basic argument is that a Perceptron (a single neuron) cannot learn this function because it is not linearly separable: in other words you cannot draw a straight line to separate the 0s from the 1s. In fact XOR is the only such logical function that is not linearly separable, which is probably why Minsky chose it for his analysis.\nFor reference AND looks like this:\n\n\n\n\nFalse\nTrue\n\n\n\n\nFalse\n0\n0\n\n\nTrue\n0\n1\n\n\n\nYou can draw a straight line to separate the 0s and 1s for AND, but you cannot do it for XOR.\nIt would take the introduction of non-linear transformations (ReLU) to enable neural networks to draw the squiggly lines that can solve these types of problems. But in the eyes of the logicists, this would be just another hack to a fundamentally unsound technology."
  },
  {
    "objectID": "posts/qmd/fastai.html#deployment",
    "href": "posts/qmd/fastai.html#deployment",
    "title": "Course notes: fast.ai Deep Learning",
    "section": "2 Deployment",
    "text": "2 Deployment\n\n2.1 The Drivetrain framework helps you build useful ML products\nThe Drivetrain approach to ML product design helps you produce actionable outcomes for a useful task instead of getting stuck building models. It has four stages.\nThe first stage is to clearly define the product objective. For instance, for a search engine the main user objective is to find a useful answer to their query. Therefore the objective of the product becomes: “find the most relevant result for a given query.”\nNext consider which possible levers can achieve this objective. In our case it is the ordering of the results: a well-ranked list of results is useful and satisfies the user objective, while a poorly ranked list does the opposite.\nAfter defining levers think about which data can power them. The very graph structure of the internet can be harnessed to produce good rankings, as sites containing higher quality results will invariably be linked to more often by other sites.\nFinally we turn to modeling, which is the process to produce the most effective mapping from inputs (data) to the outputs (levers) that satisfy the objective. If done right a high performance model will produce high performance outcomes by driving action.\nAnother example: recommendation systems.\nObjective: People buy what they like. Therefore we drive sales by linking users to other products they will enjoy or find useful (user taste).\nLevers: Rank all products by user taste and return the top 5 or 10.\nData: Purchase history contains the taste of each user. Matching users to other users would enable the system to recommend products the user has not tried yet, or even recommend to new users.\nModel: A useful model will take a user’s purchase history (or answers to a quick quiz for new users) and use it to produce a ranked list of products the user will like.\n\n\n2.2 Always train a model before looking at your data\nTrain a model before touching your data will help you figure out where to focus your efforts.\nFor instance looking at examples the model struggled on will inform extra data you may need to collect, or suggest architecture choices to consider.\nFlipping through misclassified / high loss examples can also help you find systematic biases in the data, or weed out mislabeled or corrupt examples.\nUse ImageClassifierCleaner from fastai.vision.widgets for an automated GUI to expedite this process.\n\n\n2.3 Model deployment does not require a GPU\nGenerating a prediction is far less expensive than training and so does not require a GPU.\nAlso GPUs are only good at batch processing, which is probably not necessary or helpful for a small scale app.\nLastly managing GPU servers is very complex and expensive. You are better off delaying it until server traffic merits it.\n\n\n2.4 Models rarely work as expected in deployment\nThe training set rarely reflects real-world conditions, leading to a few common issues:\n\nThe predictions data does not match the training data (training-serving skew). An example is a classifier that was trained on well-lit, professional images from the internet but is used in practice to predict on grainy images taken on mobile phone cameras. This new type of images will have to be incorporated into the model.\nThe nature of the process being modeled changes (domain shift). As norms and rules of a society evolve certain data relationships no longer hold, leading the model to make bad predictions based on false assumptions.\n\nThe very flexibility that lets neural networks learn very complex mappings is also what makes them difficult to interpret and to fix when something goes wrong.\nTherefore the best strategy for deployment has two aspects:\n\nRoll out any model gradually, first in parallel with whatever pre-existing process it is replacing, then in a limited scope with plenty of supervision, finally expanding to more areas as the model gains trust.\nGrapple with the implications of two questions: 1. what could go wrong, and 2. what happens in the best case scenario? The former will help you build the correct reporting structure around deployment to catch and address any issues, and the latter will force you to confront any possible feedback loops: that is, unintended changes in user behavior or outcomes as a consequence of deployment."
  },
  {
    "objectID": "posts/qmd/fastai.html#neural-network-foundations",
    "href": "posts/qmd/fastai.html#neural-network-foundations",
    "title": "Course notes: fast.ai Deep Learning",
    "section": "3 Neural network foundations",
    "text": "3 Neural network foundations\n\n3.1 ML explained simply\nMachine learning is fundamentally about fitting a function to data. Then we can use the function instead of data to make predictions.\nA model defines the function shape. After that, all we have to do is find the weights that minimize the difference between the model output and the actual data.\nWe can find optimal weights by starting with random values and nudging them slowly in the direction that seems to minimize this difference. If we do this long enough with the right nudging strategy then we will arrive at the best weights for the model we chose.\n\n\n3.2 Start with simple models\nProtip: start with very simple models (i.e. ResNet18 or 34). You’ll be able to iterate quickly at the beginning to figure out data augmentation and cleaning strategies. When you have those nailed down you can train on a bigger, more expensive model to see if it is worth the time and cost.\n\n\n3.3 Neural networks explained simply\nNeural networks represent data by using simple shapes like squiggles and angles to build more complicated curves. This allows the network to slowly piecing things together like a jigsaw puzzle.\nThe activation function defines the basic shape. For instance, the ReLU function generates a simple angular kink that can be moved around, stretched, and rotated by the network using the weights it has learned. The network uses many of these kinks at once to represent a complex silhouette.\nWhat makes neural networks “deep” is that outputs of one layer become inputs for the next layer. This allows the network to fashion its own jigsaw pieces based on what seems most useful for approximating the final curve."
  },
  {
    "objectID": "posts/qmd/fastai.html#nlp",
    "href": "posts/qmd/fastai.html#nlp",
    "title": "Course notes: fast.ai Deep Learning",
    "section": "4 NLP",
    "text": "4 NLP\n\n4.1 Fine-tuning\nFine-tuning lets you use a more general model to accomplish a more specific task.\nFor instance, many language models are generally trained on a very large corpus such as Wikipedia or Reddit. They understand the patterns of language but do not necessarily perform a useful task. You can use the knowledge (i.e. learned weights) of these models to accomplish a more specific task such as sentiment classification for user reviews.\nFine tuning works by throwing away the last layer that actually produces the output and replacing it with a new random matrix for the new task we are trying to learn.\n\n\n4.2 NLP tasks\nThe most popular task for NLP is classification, assigning a document into categories.\n\nSentiment categorizes documents as having positive or negative emotional content.\nAuthor identification returns the author that wrote the document.\nLegal discovery returns whether a document is relevant for a trial or not.\n\nRelated to classification is document similarity: are two documents about the same thing? We can convert this into a classification problem by concatenating the two documents and mapping the resulting string to the categories “different”, “similar,” and “identical.”"
  },
  {
    "objectID": "posts/qmd/fastai.html#footnotes",
    "href": "posts/qmd/fastai.html#footnotes",
    "title": "Course notes: fast.ai Deep Learning",
    "section": "Footnotes",
    "text": "Footnotes\n\n\ncf. The Vienna Circle, Hilbert’s Entscheidungsproblem, and American Pragmatism.↩︎"
  },
  {
    "objectID": "posts/qmd/test_post.html",
    "href": "posts/qmd/test_post.html",
    "title": "Test post",
    "section": "",
    "text": "For a demonstration of a line plot on a polar axis, see Figure 1.\n\n\nCode\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(\n  subplot_kw = {'projection': 'polar'} \n)\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n\n\n\n\n\nFigure 1: A line plot on a polar axis"
  },
  {
    "objectID": "posts/qmd/categories.html",
    "href": "posts/qmd/categories.html",
    "title": "Introduction to Aristotle’s Categories",
    "section": "",
    "text": "A 16th century diagram of categorical relations by Aristotelian scholiast Julius Pacius.\nFew essays in the history of philosophy are as impactful, less as inscrutable, and none as impactful for being inscrutable as Aristotle’s Categories.\nThe central tension of this work between utterance (τὰ λεγόμενα) and beings (τὰ ὄντα) has divided readers for over twenty-five centuries as to what it is actually about. Language? Logic? Metaphysics? Something else entirely?\nIntroducing such an evasive text is impossible: the full account of its meaning and history is scarcely imaginable, while factual “hors d’oeuvres,” no matter how well presented, fail to introduce the actual work in question.\nSummary cannot introduce us to the Categories. Instead we must interpret it.\nTo interpret something means to put it in your own words. In interpretation the barrier between the work being interpreted and the work of interpretation begins to sway. This softening the offset between ourselves and what we were trying to understand is what we call being “introduced.” Interpretation is always difficult, not just because it is “hard,” but because it is fundamentally productive.\nThis introduction, therefore, is nothing other than a plain English interpretation of the Categories, where “plain” hardly means easy or simple. Decisions have been made and points have been rendered in order to practically engage the reader with the material ordering the words on the page."
  },
  {
    "objectID": "posts/qmd/categories.html#things-can-have-a-common-name-for-different-reasons",
    "href": "posts/qmd/categories.html#things-can-have-a-common-name-for-different-reasons",
    "title": "Introduction to Aristotle’s Categories",
    "section": "1 Things can have a common name for different reasons",
    "text": "1 Things can have a common name for different reasons\nSynonyms have a common name for the same reason: a cat and a bird are both “animals” because they are both living entities.\nHomonyms have a common name for different reasons: a cello and a microscope are both “instruments,” the former because it produces music, and the latter because it is a tool for science.\nParonyms share a common root: to preach and preacher, for instance."
  },
  {
    "objectID": "posts/qmd/categories.html#beings-can-be-predicates-and-they-can-be-properties",
    "href": "posts/qmd/categories.html#beings-can-be-predicates-and-they-can-be-properties",
    "title": "Introduction to Aristotle’s Categories",
    "section": "2 Beings can be predicates, and they can be properties",
    "text": "2 Beings can be predicates, and they can be properties\nUtterances (τὰ λεγόμενα) can be interwoven or not: the former makes sentences such as “The man runs,” while the latter produces simple terms such as “man,” and “runs.”\nBeings (τὰ ὄντα) can distinguished in two ways: as predicates, or as properties.\nPredicates describe a subject (καθ’ ὑποκειμένου λέγεται). Man, for instance, is the entity that characterizes a person, and tall is something that describes a redwood tree. Predicates are always generic.\nParticular things are the opposite of a predicate. You cannot describe anything using a particular. Particulars cannot complete a sentence of the type “X is ___.”\nConsider your phone. It is a particular entity. Your phone could never describe another entity; rather it can only be described by generic predicates such as model number, color, size, shape, and so on. Even the seeming counter-example “My favorite thing is this phone,” is actually the anastrophe of the proper statement “This phone is my favorite thing”, where “favorite thing” is a predicate.\nProperties belong to a subject (ἐν ὑποκειμένῳ ἐστιν). Examples include colors, height, length, location, and so on: you will never encounter “blue” or “tall” on its own, but only as an attribute of a pre-existing thing.\nSubstance (ἡ οὐσία) opposes property. And what is that, substance? Indeed, the rest of this work – and the overall movement of philosophy itself – will radically address this question. But for the time being, you can think of substance as individuality: that by which you can single out something particular as being something particular.\nBut what about the subject? If predicates describe a subject, and properties belong in a subject, shouldn’t the subject oppose them instead of particulars and substance?\nNot exactly, because predicates and properties can themselves be subjects! For the human that this man is is itself an animal, and for this man who wears a jacket that is green, that green is itself a color. Then a subject can either be a particular thing, or predicates describing that thing, properties belonging in that thing, or predicates describing those properties.\nDraw it out: according to what we have discussed so far, everything we say about anything, speech itself, appears to spiral out of what we call particulars, and particularly what we call substance.\nThe two conditions by which we can distinguish beings, as predicates or as properties, in turn produce a table with four categories:\n\n\n\n\n\n\n\n\n\nNot a predicate(Particular things)\nPredicate\n\n\n\n\nNot a property(Substance)\nThis man\nMan\n\n\nProperty\nThis knowledge\nKnowledge\n\n\n\nHere everything interlaces in a complex crossing:\n\nProperty predicates are generic descriptors of properties: knowledge, color, shape, and so on.\nSubstantial predicates are generic descriptors of particulars: human, horse, cars, and more general labels like animal, vehicle, and so on.\nProperty particulars are specific details about particular things: the flakiness of a pastry, the specific way someone walks, the sound your car makes when it turns on.\nThen, finally, substantial particulars: the individual things – that is, everything surrounding you at all times – in the world that can be described with predicates and that possess properties (that in turn can also be described). But they never themselves describe or belong to anything else.\n\nFrom this a certain ordering about the nature of the world has been implanted: there is a sense in which ideas, concepts, descriptions, generic terms, and possibly language itself come second to the particular things we encounter around us."
  },
  {
    "objectID": "posts/qmd/categories.html#genera-also-describe-things",
    "href": "posts/qmd/categories.html#genera-also-describe-things",
    "title": "Introduction to Aristotle’s Categories",
    "section": "3 Genera also describe things",
    "text": "3 Genera also describe things\nIn the language of Aristotle, predicates that describe actual things are “species.” Predicates of these predicates are “genera.”\nGenera apply downward to the particulars. So if a man is a human, and humans are animals, then that man is also an animal.\nSpecies of a genus are distinguished by “differentiae.” Species of animal can be distinguished by being footed, winged, and so on.\nDifferentiae of one genus have no bearing toward an unrelated genus: knowledge, for instance, cannot be distinguished by footed, winged, and so on.\nBut differentiae of a genus can apply downward: the bird genus, underneath animal, itself contains species that may be distinguished as being footed (flightless), winged (flighted), and so on. This does not always hold (human is not distinguished by being footed or winged), but it is possible."
  },
  {
    "objectID": "posts/qmd/categories.html#the-categories",
    "href": "posts/qmd/categories.html#the-categories",
    "title": "Introduction to Aristotle’s Categories",
    "section": "4 The categories",
    "text": "4 The categories\nEvery word (uncombined utterance) ultimately refers to one of the following:\n\n\n\nEnglish\nGreek\nSection\n\n\n\n\nSubstance\nοὐσία\nSection 5\n\n\nQuantity\nπόσος\nSection 6\n\n\nQuality\nποιός\nSection 7\n\n\nRelation\nπρός τι\nSection 8\n\n\nPlace\nποῦ\nNot discussed\n\n\nTime\nποτὲ\nNot discussed\n\n\nPosture\nκεῖσθαι\nSection 8\n\n\nState\nἔχειν\nNot discussed\n\n\nAction\nποιεῖν\nNot discussed\n\n\nAffection\nπάσχειν\nSection 7\n\n\n\nInsofar as speech consists of words, these ten categories constitute the meaning of speech in general.\nInsofar as speech refers to actual things, any being whatsoever must fall into one of these ten categories.\nHere also Aristotle notes here that only combined utterances, statements, strictly speaking, be true or false."
  },
  {
    "objectID": "posts/qmd/categories.html#sec-substance",
    "href": "posts/qmd/categories.html#sec-substance",
    "title": "Introduction to Aristotle’s Categories",
    "section": "5 Substance",
    "text": "5 Substance\nThere are two kinds of substance (ἡ οὐσία), first and second.\n\n5.1 First substance\nFirst substance refers to actual things: these are the particulars we discussed above.\nFirst substances is truly the first word in that it did not exist, there would be nothing else to talk about. The rest – species, genera, differentiae, and properties – would have no referent, and therefore could not be otherwise.\n\n\n5.2 Second substance\nSecondary substances are the substantial predicates: species, genera, and differentiae that describe what actual things are.\nOnly second substance describes actual things synonymously. So if this man is a man, then the definition of man, animal, applies to him. On the other hand, properties of a man – his skin tone – do not proceed to define him as that genus – a color. Therefore they are is homonymous.\nSpecies is more substantial than genre:\n\nIt is “nearer” to substance in that it is a more natural substitute: it is more sensible to refer to this man a man than it does to call him an animal.\nIt also behaves more similarly in that it has less capacity for description than genre. (First substance, recall, cannot describe anything at all.)\n\nDespite being predicates, second substances are still truly substances:\n\nThey alone define first substance. As noted above, you can measure whatever property you like about a man – his height, his knowledge, age, posture, and so on – but none of these will tell what what he actually is.\nThey can be described just like first substance. So if this man walks on two legs and has knowledge, then man and animal can be described similarly.\nSpecies and genre are never also properties belonging to a subject. Properties, as established above, name the subject homonymously, but secondary substances do so synonymously. For if this pen is a pen, that also makes it an artificial device.\n\n\n\n5.3 Defining substance\nWhat is substance? Let us ask again.\n\n5.3.1 First substance\nWe only seem, as we saw, to talk about substance, either by way of description or by property.\nThis is why defining substance by itself becomes tricky: without descriptions, we literally run out of words to describe it.\nAll substance can possibly denote, then, is its very ability to be pointed out.\nThis is what Aristotle means by his famous claim that substance appears to mark τόδε τι, “a this.”\nHere both words share equal weight:\n\nτόδε, “this,” is a demonstrative: that which has been pointed out.\nτι, “a,” is the indefinite pronoun: it conveys the generality of the definition.\n\nWhen we strip particular things of their qualifiers, all they refer to in general is their ability to be referred to as whatever they specifically are.\nSubstance, then, in an unusual turn of the word, is thoroughly remarkable: it is the very origin of every possible remark.\nTODO: This also refers to the ACT of pointing substance out. Substance points to the activity of pointing out.\nold text:\nThis means any utterance, no matter how, what, where, or why it is said, must ultimately refer to a primary substance.\nThis is exactly the definition Aristotle gives for primary substance: something that has been pointed out (τόδε τι).\nSubstance never does any pointing: it never stands in for another entity. Instead substance is that which in every case is pointed to: clarified by predicates or described by properties. It is the seat of all possible signification.\nFor this reason substance itself cannot be defined as anything but the mere act of pointing\n\n\n5.3.2 Second substance\nAccordingly, second substance is the defining remark: it distinguishes first substance by its kind.\nIf first substance is remarkability, then second substance fills in this potential by telling us what it actually is.\n\n\n\n5.4 Properties of substances\n\n\n5.5 Substance vs. statements"
  },
  {
    "objectID": "posts/qmd/categories.html#sec-quantity",
    "href": "posts/qmd/categories.html#sec-quantity",
    "title": "Introduction to Aristotle’s Categories",
    "section": "6 Quantity",
    "text": "6 Quantity"
  },
  {
    "objectID": "posts/qmd/categories.html#sec-quality",
    "href": "posts/qmd/categories.html#sec-quality",
    "title": "Introduction to Aristotle’s Categories",
    "section": "7 Quality",
    "text": "7 Quality"
  },
  {
    "objectID": "posts/qmd/categories.html#sec-relation",
    "href": "posts/qmd/categories.html#sec-relation",
    "title": "Introduction to Aristotle’s Categories",
    "section": "8 Relation",
    "text": "8 Relation"
  },
  {
    "objectID": "posts/qmd/neovim.html",
    "href": "posts/qmd/neovim.html",
    "title": "Neovim resources",
    "section": "",
    "text": "For Data Science / programming / note-taking / publishing I recommend the Quarto kickstarter. The shortcuts below are written with this configuration installed so YMMV.\n\n\n\nQuarto lets you work in code cells and publish documents (like this website!)."
  },
  {
    "objectID": "posts/qmd/neovim.html#configuration",
    "href": "posts/qmd/neovim.html#configuration",
    "title": "Neovim resources",
    "section": "",
    "text": "For Data Science / programming / note-taking / publishing I recommend the Quarto kickstarter. The shortcuts below are written with this configuration installed so YMMV.\n\n\n\nQuarto lets you work in code cells and publish documents (like this website!)."
  },
  {
    "objectID": "posts/qmd/neovim.html#shortcuts",
    "href": "posts/qmd/neovim.html#shortcuts",
    "title": "Neovim resources",
    "section": "Shortcuts",
    "text": "Shortcuts\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nu\nUndo.\n\n\n&lt;ctrl&gt;+r\nRedo.\n\n\n&lt;shift&gt;-k\nLook up function definition.\n\n\n&lt;shift&gt;-h\nFlip back and forth through buffers (tabs) on nvim.\n\n\n&lt;shift&gt;-l\nFlip back and forth through buffers (tabs) on nvim.\n\n\n&lt;ctrl&gt;-w\nOpen window options.\n\n\n&lt;ctrl&gt;-w + v\nVertical split.\n\n\n&lt;ctrl&gt;-w + s\nHorizontal split.\n\n\n&lt;ctrl&gt;-w + &lt;shift&gt;-j\nSwitch between vertical and horizontal splits.\n\n\n&lt;ctrl&gt;-w + s\nHorizontal split.\n\n\n:tabnew\nNew tab.\n\n\n&lt;leader&gt;-f + d\nOpen buffers.\n\n\n&lt;shift&gt;-g\nEnd of the file.\n\n\ngg\nBeginning of the file.\n\n\n&lt;leader&gt; + c + O/o + p\nNew python cell above/below.\n\n\n.\nPastes the previous edit.\n\n\nzb/zz/zt\nAdjust the screen to the bottom/middle/top without moving the cursor.\n\n\n&lt;ctrl&gt;-i/o\nGo forward/backward in cursor position."
  },
  {
    "objectID": "posts/qmd/missing.html",
    "href": "posts/qmd/missing.html",
    "title": "Tips from ./missing-semester",
    "section": "",
    "text": "Here’s what I picked up on from the 2020 offering of the excellent ./missing-semester course.\nThis document is written to be a reference so the discussion should be relatively self-contained.\nEnjoy!"
  },
  {
    "objectID": "posts/qmd/missing.html#shell-basics",
    "href": "posts/qmd/missing.html#shell-basics",
    "title": "Tips from ./missing-semester",
    "section": "1 Shell basics",
    "text": "1 Shell basics\n\n1.1 Use redirection and piping to link commands together\n\n&gt; and &lt; redirect output from and to a file or stream.\nx &lt; y redirects y as input to x.\nx &gt; y redirects output of x to y.\n&lt;&lt; and &gt;&gt; will append as opposed to overwrite.\n| chains program together.\n\n\n\n1.2 Use single quotations to nullify meaning\n\nEnclosing characters in single quotes preserves the literal value of each character within the quotes. A single quote may not occur between single quotes, even when preceded by a backslash.1\n\n\n\n1.3 sudo\nsudo stands for “super user do”2."
  },
  {
    "objectID": "posts/qmd/missing.html#shell-tools-and-scripting",
    "href": "posts/qmd/missing.html#shell-tools-and-scripting",
    "title": "Tips from ./missing-semester",
    "section": "2 Shell tools and scripting",
    "text": "2 Shell tools and scripting\n\n2.1 Save values by setting variables\nSet variable using x=[value] with no spaces around the equals sign.\nAccess it with echo $x.\n\n\n2.2 How to write bash scripts\nWe can write a bash script by copying the following into mcd.sh:\nmcd () {\n  mkir -p \"$1\"\n  cd \"$1\"\n}\n$1 refers to the first positional argument the function recieves. Putting double quotations around it ensures that names that contain a space don’t accidently get truncated.\nIf you load this function into the terminal with source mcd.sh you can run it using mcd [dirname].\nSome more variable names:\n\n\n\nCommand\nDescription\n\n\n\n\n$1 to $9\nFirst 9 positional arguments (use ${i} to access argumennts past the 9th).\n\n\n$0\nName of the filename that the script is being run from (will be /bin/bash for the example above.)\n\n\n$_\nLast argument of the last command. So we could have changed line 3 above to cd \"$_\".\n\n\n$#\nNumber of arguments passed in.\n\n\n!!\nReruns the previous command. Useful for redoing things that failed due to permissions: sudo !!.\n\n\n$?\nExit code of the previous command. You can use it to catch errors with || and &&3.\n\n\n\n\n\n2.3 Command substitution saves output to a variable\nFor instance, x=(pwd) will save your working directory into x.\nProcess substitution lets you pass command output into commands that expect a file instead of STDIN: cat &lt;(ls) &lt;(ls ..) will concatenate the contents of the current directory with that of its parent directory.\n\n\n2.4 Grab files names using patterns with globbing wildcards\n\n\n\n\n\n\n\nWildcard\nDescription\n\n\n\n\n?\nMatches one position: x? matches x1 but not x10.\n\n\n*\nMatches multiple positions: x* matches x1 and x10.\n\n\n{}\nPerform expansion of all values. Use multiple for Cartesian product; e.g. echo {1,2}{3,4} returns 13 14 23 24. Use {x..y..i} to go from x to y with increment i.\n\n\n\n\n\n2.5 Useful misc. shell commands\n\n\n\n\n\n\n\n\nCommand\nDescription\nExample\n\n\n\n\nspellcheck\nAnalyze shell scripts for errors and bugs.\nspellcheck script.sh\n\n\ntldr\nGet concise help pages (with examples!).\ntldr [command]\n\n\nfind\nFind files recursively in a folder.\nfind [dir] -name '[filename|*.ext]'\n\n\n\nfind can also process the results:\n# Delete all files with .tmp extension\nfind . -name '*.tmp' -exec rm {} \\;\n\n\n2.6 Alternatives to find with extra functionality\n\n\n\nCommand\nBenefit\n\n\n\n\nfd\nModernized implementation with simpler syntax.\n\n\nlocate\nFaster lookup via file indexing (updated by updatedb).\n\n\ngrep\nSearch the content of files.\n\n\nrg (ripgrep)\nFaster, modernized grep.\n\n\nrga\nUse rg on PDFs, and other documents.\n\n\n\n\n\n2.7 Use history to avoid re-typing commands\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nhistory\nReturns all commands that you ran.\n\n\nhistory [n]\nReturns the last n commands.\n\n\nhistory | rg [search term]\nSearches through commands.\n\n\n&lt;ctrl&gt;-r\nBuilt-in search.&lt;ctrl&gt;-r to cycle through entries and &lt;ctrl&gt;-c to cancel the search.\n\n\n\nYou can improve &lt;ctrl&gt;-r by incorporating fzf to add fuzzy matching. Learn how with this command:\ncat $(rg README &lt;(apt show fzf) | cut -d ' ' -f 3)\nHopefully it makes sense to you based on what you’ve read so far!\n\n\n2.8 Directory navigation commands\n\n\n\nCommand\nDescription\n\n\n\n\ntree\nBasic tree visualizer.\n\n\nbroot\nNicer tree UI.\n\n\nnnn\nMac-style explorer.\n\n\nless\nBreak long text into pages."
  },
  {
    "objectID": "posts/qmd/missing.html#editors-vim",
    "href": "posts/qmd/missing.html#editors-vim",
    "title": "Tips from ./missing-semester",
    "section": "3 Editors (Vim)",
    "text": "3 Editors (Vim)\n\n3.1 Vim operates in different modes\n\n\n\nMode\nHow to enter\n\n\n\n\nNORMAL\n&lt;esc&gt;\n\n\nINSERT\ni\n\n\nREPLACE\nR\n\n\nVISUAL\nv\n\n\nV-LINE\n&lt;shift&gt;-v\n\n\nV-BLOCK\n&lt;ctrl&gt;-v\n\n\nCOMMAND-LINE\n:\n\n\n\n\n\n3.2 Movement around using keyboard shortcuts\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nj/k\nDown/up.\n\n\nh/l\nLeft/right.\n\n\nw\nNext word.\n\n\nb/e\nBeginning/end of word.\n\n\n0/$/^\nMove to beginning/end/first non-empty character of line.\n\n\ngg/G\nBeginning/end of file.\n\n\nH/M/L\nTop/middle/bottom of screen.\n\n\n&lt;ctrl&gt;-u/d\nPage up/down.\n\n\n[number]G\nGo to line.\n\n\n%\nGo to corresponding parenthesis, bracket, etc.\n\n\nf/F\nFind a character forward/backward. Navigate back and forth with ,/;.\n\n\nt/T\nLike find but up until the character instead of on it.\n\n\n\nYou can do a lot of the movement commands n times, e.g. [n]w to go forward n words.\n\n\n3.3 Edit text efficiently with commands\n\n\n\nCommand\nDescription\n\n\n\n\na\nAppend to current position.\n\n\nA\nAppend to end of current line.\n\n\nr\nReplace one character.\n\n\nR\nREPLACE mode.\n\n\nd\nDelete.\n\n\nc\nDelete movement and switch to insert mode.\n\n\nx/X\nDelete a character forwards/backwards.\n\n\ns\nDelete a character and switch to insert mode.\n\n\nS\nDelete a line and switch to insert mode.\n\n\n\nEditing commands can modified via movement commands, e.g. dw will delete a word, and d[n]w will delete n words.\nQuickly duplicate a line with yy p.\n\n\n3.4 Modifiers select text within blocks\n\n\n\nModifier\nDescription\n\n\n\n\na\nAround.\n\n\ni\nInner.\n\n\n\nModifiers change the meaning of a command.\nSo ci( will delete the contents inside a pair of parentheses, while ca( will include the parentheses.\nModifiers can also be used in visual mode: vas will select the current sentence, vap the paragraph, and va( the parenthetical block.\n\n\n3.5 Find\nFind things with / followed by what you are looking for. Pressing &lt;enter&gt; will jump you to the closest occurrence. n/N cycle forwards/backwards through the results."
  },
  {
    "objectID": "posts/qmd/missing.html#data-wrangling",
    "href": "posts/qmd/missing.html#data-wrangling",
    "title": "Tips from ./missing-semester",
    "section": "4 Data wrangling",
    "text": "4 Data wrangling\n\n4.1 Stream editing processes sequences of elements\nThere are a number of commands you can use to process streams:\n\n\n\n\n\n\n\n\nCommand\nDescription\nSyntax\n\n\n\n\nsed\nProcess text in place using regex. Use s for text substitution and -E for modern syntax**.\nsed -E s/[pattern]/[replacment]/[flag]\n\n\nawk\nProcess columnar data. Access the columns using $n. Using BEGIN and END enable stateful behavior.\nawk 'command'\n\n\nxargs\nTakes lines of inputs and turns them into command arguments.\n[STDOUT] | xargs [command]\n\n\n\nAlso worth mentioning:\n\nsort\nuniq (requires a sorted list; -c to include counts)\npaste (-s to concatenate columns and -d to change the delimiter)\nhead/tail\nbc (calculator! Use with -l to read STDIN).\n\n\n\n4.2 Regex is a language to capture text patterns\nHere are some common building blocks:\n\n\n\nExpression\nDescription\n\n\n\n\n.\nAny character.\n\n\n[...]\nA set of characters.\n\n\n[^...]\nThe opposite of the set.\n\n\n(x|y|...)\nA set of strings.\n\n\n(...)*\n0 or more.\n\n\n(...)+\n1 or more.\n\n\n(...)?\n0 or 1.\n\n\n(...){n}\nN times.\n\n\n(...){n,}\nN or more times.\n\n\n(...){n, m}\nN to m times.\n\n\n^\nAnchor for beginning of string.\n\n\n$\nAnchor for end of string.\n\n\n\nAdding ? suffix to quantifiers (*, +, ?, {n}, {n,}, {n, m}) will toggle lazy matching which will find the leftmost match. Quantifiers are greedy by default, meaning they will match the rightmost character, which can lead to unintended matches.\nCreate a capture group around an expression using parentheses (). Then you can select it positionally in a replace statement using \\n to indicate the nth group:\n# Return just the filenames from a list of PDFs.\nls *.pdf | sed -E 's/^(.+).pdf$/\\1/'"
  },
  {
    "objectID": "posts/qmd/missing.html#command-line-environment",
    "href": "posts/qmd/missing.html#command-line-environment",
    "title": "Tips from ./missing-semester",
    "section": "5 Command-line environment",
    "text": "5 Command-line environment\n\n5.1 Manage multiple processes using job control\nYou can control processes via standardized POSIX signals4 that interrupt, pause, background start, etc. programs:\n\n\n\nShortcut\nDescription\n\n\n\n\n&lt;ctrl&gt;-c\nSIGINT, interrupts the current process.\n\n\n&lt;ctrl&gt;-\\\nSIGQUIT, quits the process similar to SIGINT.\n\n\n&lt;ctrl&gt;-z\nSIGSTOP, suspends the current process.\n\n\n\nYou can catch these signals to add functionality like saving program state when interrupted for instance.\nThere are also commands to manage unfinished processes:\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\njobs\nView unfinished jobs. -l to list PID (Process ID), -p only list PID, etc. (cf. tldr jobs).\n\n\nps\nGet a snapshot of processes. Similar to jobs.\n\n\nbg %n/PID\nContinue unfinished job in the background using %n position in jobs queue or PID.\n\n\nfg %n\\PID\nBring and resume a background process to the foreground.\n\n\nkill %n/PID\nTerminate job.\n\n\nnohup\nContinue job even if terminal session is closed by by ignoring SIGHUP hangup signal.\n\n\ndisown %n/PID\nnohup already running jobs from current session.\n\n\n[process] &\nStart command in background (will print to STDOUT unless redirected).\n\n\n\n&lt;ctrl&gt;-z followed by bg will send the current process to execute in the background.\n\n\n5.2 Multiplexers enable multitasking within a single session\ntmux, a popular multiplexer provides the following hierarchy:\n\nSessions are an independent workspace.\nWindows are like tabs within a workspace.\nPanes are individual splits within a window.\n\nOnce a session begins (tmux new -s NAME) commands are bound to &lt;ctrl&gt;-b. This is commonly remapped to &lt;ctrl&gt;-a.\nThen you can create new windows and rearrange panes. Use &lt;ctrl&gt;-b + ? for a list of options.\nAlso feel free to consult this tutorial and its followup on customization."
  },
  {
    "objectID": "posts/qmd/missing.html#version-control-git",
    "href": "posts/qmd/missing.html#version-control-git",
    "title": "Tips from ./missing-semester",
    "section": "6 Version control (Git)",
    "text": "6 Version control (Git)\n\n6.1 Git tracks data efficiently using hashing\nCommits in Git come with a long alphanumeric string. This string is called a hash and it links each commit to the data it represents.\nA hash is a unique string generated by the content of a file. If the file changes, so does the hash. Git uses this fact to store files efficiently: modified files get a new hash, while unedited files keep the same value.\nCommits refer to the hash value of the root directory. The root directory itself contains the hashes of its contents, and so on. By storing hashes instead of data, Git avoids having to copy the same files over and over again for each commit. This hash-based data structure is called content-addressed storage (CAS).\nUse git cat-file -p [commit hash] to explore your commits!\n\n\n6.2 Useful Git commands\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\ngit clone --depth=1\nClone a git repository without the commit history.\n\n\ngit add -p [file]\nSelect lines of code within a file to add (patch).\n\n\ngit blame [file]\nSee who and which commit authored each line of a file.\n\n\ngit show [commit]\nDisplay what changed in each commit.\n\n\n\nGuide: how to write good commits."
  },
  {
    "objectID": "posts/qmd/missing.html#debugging",
    "href": "posts/qmd/missing.html#debugging",
    "title": "Tips from ./missing-semester",
    "section": "7 Debugging",
    "text": "7 Debugging\n\n7.1 Loggers collect print statements for later analysis\n\n“The most effective debugging tool is still careful thought, coupled with judiciously placed print statements” — Brian Kernighan, Unix for Beginners.\n\nA logger will automatically save print statements to a file. It can capture anything from summary statistics about incoming data to error messages. You can set severity levels5 to particular log entries to enable filtering through data as needed.\nLogs let you inspect runs to track and resolve issues over time. This strategy pays off as project complexity increases.\n/var/logs/ contains system logs.\n\n\n7.2 Debuggers help you fix code interactively\nDebuggers are programs that let you step through code interactively so you can figure out what it is doing.\nipdb6 is Python’s built-in pdb with niceties such as colored output, tab completion and so on. You start it by running python -m ipdb [script].\nThese are some useful commands for pdb/ipdb:\n\n\n\n\n\n\n\nCommand\nDescription\n\n\n\n\nl\nLists +/- 5 lines around a line. Use l . for the current line, or l [start] [end] for an arbitrary range.\n\n\nll\nLong lists all the code around the current line.\n\n\ns\nRun the current line and step to the next available line. This is could be inside of another function, so it’s not necessarily the next numerical line!\n\n\nn\nExecute the current line and stop at the next numerical line, jumping over any function calls.\n\n\nrestart\nRe-run the program from the top.\n\n\nc\nContinue executing from the current line until the program halts, either due to hitting a breakpoint, completing, or crashing.\n\n\np [var]\nPrint the value of any variable in memory.\n\n\nb [line number]\nAdd a breakpoint to the specified line. The debugger will halt execution when it hits this line.\n\n\nq\nQuit.\n\n\n\nGeneral debuggers like gdb work on any language and provide low-level information on hardware registers etc..\n\n\n7.3 Static analyzers fix programming errors and formatting issues\nLinters check code for logical issues such as referencing an undefined variable. They will typically not edit code but instead highlight the issue for the programmer to fix. Examples include pyflakes, and flake8.\nFormatters standardize code and ensure compliance with style guides such as PEP. They usually edit the file for you. Examples include autopep8, black, and isort.\nruff7 is a new linter and formatter offering 10-100x faster performance."
  },
  {
    "objectID": "posts/qmd/missing.html#footnotes",
    "href": "posts/qmd/missing.html#footnotes",
    "title": "Tips from ./missing-semester",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nhttps://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html↩︎\nObligatory: https://xkcd.com/149/.↩︎\nhttps://www.gnu.org/software/bash/manual/bash.html#Lists↩︎\nLook up man signal for a comprehensive list of every signal.↩︎\ncf. Python’s severity levels.↩︎\nhttps://github.com/gotcha/ipdb↩︎\nhttps://github.com/astral-sh/ruff↩︎"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Understand the most importantly inscrutable essay in the history of philosophy.\n\n\n10 min\n\n\n\nNov 7, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#writings",
    "href": "index.html#writings",
    "title": "Posts",
    "section": "",
    "text": "Understand the most importantly inscrutable essay in the history of philosophy.\n\n\n10 min\n\n\n\nNov 7, 2023\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "index.html#notes-and-resources",
    "href": "index.html#notes-and-resources",
    "title": "Posts",
    "section": "Notes and resources",
    "text": "Notes and resources\n\n\n\n\n\n\n\n\n\n\nCourse notes: fast.ai Deep Learning\n\n\nInsights from fast.ai’s 2022 offering of Practical Deep Learning for Coders.\n\n\n\n\n\n\n\n\n\n\n\n\n\nNeovim resources\n\n\nAn ongoing list of tips, shortcuts, and tricks I find useful to navigating the world of Neovim.\n\n\n\n\n\n\n\n\n\n\n\n\n\nTips from ./missing-semester\n\n\nMy takeaways from MIT’s “Missing Semester of Your CS Education” course.\n\n\n\n\n\n\n\nNo matching items"
  }
]